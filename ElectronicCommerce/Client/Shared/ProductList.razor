@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Sales == null) {
    <span class="spinner-border spinner-border-sm"></span>
    <span>@ProductService.Message</span>
}
else if (ProductService.Products.Count == 0) {
    <span>@ProductService.Message</span>
}
else {
    <div class="row row-cols-5">
        @foreach (var (product, sales) in ProductService.Products.Zip(ProductService.Sales)) {
            <div class="col">
                <div class="card" >
                    <a href="/product/@product.Id">
                        <img class="card-img-top" src="@product.ImageUrl" alt="@product.Title">
                        <div class="card-body">
                            <h5 class="text-success">@GetPriceText(product)</h5>
                            <p class="text-muted float-end">销量：@sales</p>
                            <h3 class="card-title">@product.Title</h3>
                        </div>
                    </a>
                </div>
            </div>
        }
    </div>
}

@code {
    protected override void OnInitialized() => ProductService.ProductsChange += StateHasChanged;
    
    public void Dispose() => ProductService.ProductsChange -= StateHasChanged;

    string GetPriceText(Product product) {
        var variants = product.Varients;
        switch (variants.Count) {
            case 0:
                return "暂无报价";
            case 1:
                return $"￥{variants[0].Price}";
            default: {
                var minPrice = variants.Min(v => v.Price);
                return $"低至￥{minPrice}";
            }
        }
    }

}