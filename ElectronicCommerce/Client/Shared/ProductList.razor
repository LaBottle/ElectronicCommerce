@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || !ProductService.Products.Any()) {
    <span class="spinner-border spinner-border-sm"></span>
    <span>Loading Products...</span>
}
else {
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products) {
            <li class="media my-3">
                <div class="media-img-wrapper me-5" >
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
}

@code {
    static List<Product> Products = new();

    protected override void OnInitialized() => ProductService.ProductsChange += StateHasChanged;

    public void Dispose() => ProductService.ProductsChange -= StateHasChanged;

    string GetPriceText(Product product) {
        var variants = product.Varients;
        if (!variants.Any()) {
            return string.Empty;
        }
        if (variants.Count == 1) {
            return $"${variants[0].Price}";
        }

        var minPrice = variants.Min(v => v.Price);
        return $"As low as ${minPrice}";
    }

}