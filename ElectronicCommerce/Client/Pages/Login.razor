@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject ICartService CartService
@inject NavigationManager NavigationManager 
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>登录</PageTitle>
<h3>登录</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="userName">用户名</label>
        <InputText id="userName" @bind-Value="user.UserName" class="form-control"/>
        <ValidationMessage For="() => user.UserName"/>
    </div>
    <div class="mb-3">
        <label for="password">密码</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"/>
        <ValidationMessage For="() => user.Password"/>
    </div>
    <button type="submit" class="btn btn-primary">登录</button>
    <div class="text-danger">
        <span>@message</span>
    </div>
</EditForm>

@code {
    protected UserLogin user = new UserLogin();
    
    string message = string.Empty;
    
    string returnUrl = string.Empty;

    protected override void OnInitialized() {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url)) {
            returnUrl = url;
        }
    }

    async Task HandleLogin() {
        var result = await AuthService.Login(user);
        if (result.Success) {
            message = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else {
            message = result.Message;
        }
    }
}