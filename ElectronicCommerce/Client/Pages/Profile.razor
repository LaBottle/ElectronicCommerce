@page "/profile"
@inject IAuthService AuthService
@attribute [Authorize]

<AuthorizeView>
    <h3>你好！<i>@context.User.Identity!.Name</i></h3>
</AuthorizeView>

<EditForm Model="userChangePassword" OnValidSubmit="ChangePassword">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="password">新密码</label>
        <InputText id="password" @bind-Value="userChangePassword.Password" class="form-control" type="password"/>
        <ValidationMessage For="() => userChangePassword.Password"/>
    </div>
    <div class="mb-3">
        <label for="confirmPassword">确认密码</label>
        <InputText id="confirmPassword" @bind-Value="userChangePassword.ConfirmPassword" class="form-control" type="password"/>
        <ValidationMessage For="() => userChangePassword.ConfirmPassword"/>
    </div>
    <button type="submit" class="btn btn-primary">修改密码</button>
    <div class="@userChangePasswordMessageCssClass ">
        <span>@userChangePasswordMessage</span>
    </div>
</EditForm>

<br/>
<br/>
<br/>

<EditForm Model="userChangeAddress" OnValidSubmit="ChangeAddress">
    <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="newAddress">新地址</label>
            <InputText id="newAddress" @bind-Value="userChangeAddress.Address" class="form-control" type="password"/>
            <ValidationMessage For="() => userChangeAddress.Address"/>
        </div>
        <button type="submit" class="btn btn-primary">修改地址</button>
        <div class="@userChangeAddressMessageCssClass ">
            <span>@userChangeAddressMessage</span>
        </div>
</EditForm>

@code {
    UserChangePassword userChangePassword = new UserChangePassword();
    UserChangeAddress userChangeAddress = new UserChangeAddress();
    string userChangePasswordMessage = string.Empty;
    string userChangePasswordMessageCssClass = string.Empty;
    string userChangeAddressMessage = string.Empty;
    string userChangeAddressMessageCssClass = string.Empty;

    async Task ChangePassword() {
        var result = await AuthService.ChangePassword(userChangePassword);
        userChangePasswordMessage = result.Message;
        userChangePasswordMessageCssClass = result.Success ? "text-success" : "text-danger";
    }
    
    async Task ChangeAddress() {
        var result = await AuthService.ChangeAddress(userChangeAddress);
        userChangeAddressMessage = result.Message;
        userChangeAddressMessageCssClass = result.Success ? "text-success" : "text-danger";
    }
}