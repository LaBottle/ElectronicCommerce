@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
<PageTitle>Shopping Cart</PageTitle>

@if (cartProducts == null || !cartProducts.Any()) {
    <span>@message</span>
}
else if (orderPlaced) {
    <span>Thank you for your order! You can check your orders <a href="orders">here</a></span>
}
else {
    <div>
        @foreach (var product in cartProducts) {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">@product.Title</a>
                    </h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" value="@product.Quantity" @onchange="e => UpdateQuantity(e, product)" class="form-control input-quantity" min="1"/>
                    <button class="btn btn-delete" @onclick="() => RemoveItemFromCart(product.ProductId, product.ProductTypeId)">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)
        </div>
        <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
    </div>
}

@code {
    List<CartProductResponse>? cartProducts = null;
    string message = "Loading cart...";
    bool orderPlaced;

    protected override async Task OnInitializedAsync() {
        orderPlaced = false;
        await LoadCart();
    }

    async Task RemoveItemFromCart(int productId, int productTypeId) {
        await CartService.RemoveItemFromCart(productId, productTypeId);
        await LoadCart();
    }

    async Task LoadCart() {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts==null||cartProducts.Count==0) {
            message = "Your cart is empty.";
        }
    }

    async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product) {
        product.Quantity = int.Parse(e.Value!.ToString()!);
        if (product.Quantity < 1) {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }

    async Task PlaceOrder() {
        await OrderService.PlaceOrder();
        orderPlaced = true;
        await CartService.GetCartItemsCount();
    }

}